// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import nettools "github.com/DevFactory/go-tools/pkg/nettools"
import time "time"

// IPRouteSmartNatHelper is an autogenerated mock type for the IPRouteSmartNatHelper type
type IPRouteSmartNatHelper struct {
	mock.Mock
}

// EnsureOnlyOneIPRuleExistsForFwMark provides a mock function with given fields: rule
func (_m *IPRouteSmartNatHelper) EnsureOnlyOneIPRuleExistsForFwMark(rule nettools.IPRule) ([]nettools.IPRule, time.Duration, error) {
	ret := _m.Called(rule)

	var r0 []nettools.IPRule
	if rf, ok := ret.Get(0).(func(nettools.IPRule) []nettools.IPRule); ok {
		r0 = rf(rule)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]nettools.IPRule)
		}
	}

	var r1 time.Duration
	if rf, ok := ret.Get(1).(func(nettools.IPRule) time.Duration); ok {
		r1 = rf(rule)
	} else {
		r1 = ret.Get(1).(time.Duration)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(nettools.IPRule) error); ok {
		r2 = rf(rule)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetRefreshCount provides a mock function with given fields:
func (_m *IPRouteSmartNatHelper) GetRefreshCount() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// IsRefreshing provides a mock function with given fields:
func (_m *IPRouteSmartNatHelper) IsRefreshing() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StartRefreshing provides a mock function with given fields:
func (_m *IPRouteSmartNatHelper) StartRefreshing() {
	_m.Called()
}

// StopRefreshing provides a mock function with given fields:
func (_m *IPRouteSmartNatHelper) StopRefreshing() {
	_m.Called()
}
