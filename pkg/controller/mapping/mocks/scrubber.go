// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import net "net"
import v1 "k8s.io/api/core/v1"
import v1alpha1 "github.com/DevFactory/smartnat/pkg/apis/smartnat/v1alpha1"

// Scrubber is an autogenerated mock type for the Scrubber type
type Scrubber struct {
	mock.Mock
}

// ScrubMapping provides a mock function with given fields: sn, others
func (_m *Scrubber) ScrubMapping(sn *v1alpha1.Mapping, others []v1alpha1.Mapping) (bool, bool, string, *net.IP) {
	ret := _m.Called(sn, others)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*v1alpha1.Mapping, []v1alpha1.Mapping) bool); ok {
		r0 = rf(sn, others)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(*v1alpha1.Mapping, []v1alpha1.Mapping) bool); ok {
		r1 = rf(sn, others)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(*v1alpha1.Mapping, []v1alpha1.Mapping) string); ok {
		r2 = rf(sn, others)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 *net.IP
	if rf, ok := ret.Get(3).(func(*v1alpha1.Mapping, []v1alpha1.Mapping) *net.IP); ok {
		r3 = rf(sn, others)
	} else {
		if ret.Get(3) != nil {
			r3 = ret.Get(3).(*net.IP)
		}
	}

	return r0, r1, r2, r3
}

// ValidateEndpoints provides a mock function with given fields: _a0, endpoints
func (_m *Scrubber) ValidateEndpoints(_a0 *v1alpha1.Mapping, endpoints *v1.Endpoints) error {
	ret := _m.Called(_a0, endpoints)

	var r0 error
	if rf, ok := ret.Get(0).(func(*v1alpha1.Mapping, *v1.Endpoints) error); ok {
		r0 = rf(_a0, endpoints)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
