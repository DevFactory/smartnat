// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import net "net"
import v1 "k8s.io/api/core/v1"
import v1alpha1 "github.com/DevFactory/smartnat/pkg/apis/smartnat/v1alpha1"

// Syncer is an autogenerated mock type for the Syncer type
type Syncer struct {
	mock.Mock
}

// DeleteMapping provides a mock function with given fields: sn, externalIP
func (_m *Syncer) DeleteMapping(sn *v1alpha1.Mapping, externalIP net.IP) (bool, error) {
	ret := _m.Called(sn, externalIP)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*v1alpha1.Mapping, net.IP) bool); ok {
		r0 = rf(sn, externalIP)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Mapping, net.IP) error); ok {
		r1 = rf(sn, externalIP)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncMapping provides a mock function with given fields: sn, svc, eps
func (_m *Syncer) SyncMapping(sn *v1alpha1.Mapping, svc *v1.Service, eps *v1.Endpoints) (bool, error) {
	ret := _m.Called(sn, svc, eps)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*v1alpha1.Mapping, *v1.Service, *v1.Endpoints) bool); ok {
		r0 = rf(sn, svc, eps)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1alpha1.Mapping, *v1.Service, *v1.Endpoints) error); ok {
		r1 = rf(sn, svc, eps)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
